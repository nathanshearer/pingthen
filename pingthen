#!/bin/bash

#----------------------------------------------------------------------------
# pingthen
# Copyright (C) 2013 Nathan Shearer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to:
#   The Free Software Foundation Inc.
#   51 Franklin Street
#   Fifth Floor
#   Boston, MA
#   02110-1301
#   USA

NAME="pingthen"
CODENAME="pingthen"
COPYRIGHT="Copyright (C) 2013 Nathan Shearer"
VERSION="1.0.0.0"

# \brief Pings an IP and executes commands based on the result
# \param $1 The IP address to ping
# \param $2 The function to esecute when $1 is offline
function pingthen_test
{
	echo "pingthen_test" "$@" >> "$LOG"
	# ping the IP and gather metrics
	local PING_RECEIVED=0
	local PING_LOST=0
	local PING_SENT=0
	PING_ATTEMPT=0
	while [ $PING_ATTEMPT -lt $PING_SEND ]; do
		ping -w $PING_TIMEOUT -c 1 $1 >>"$LOG" 2>>"$LOG"
		local PING_RETURN=$?
		if [ $PING_RETURN -eq 0 ]; then
			PING_RECEIVED=$(($PING_RECEIVED+1))
		fi
		if [ $PING_RETURN -ne 0 ]; then
			PING_LOST=$(($PING_LOST+1))
		fi
		PING_SENT=$(($PING_SENT+1))
		sleep $PING_DELAY
		PING_ATTEMPT=$(($PING_ATTEMPT+1))
	done
	# echo the metrics if verbose
	if $VERBOSE; then
		echo "PING $1, $PING_SENT packets transmitted, $PING_RECEIVED received, $PING_LOST lost"
	fi
	if [ $PING_RECEIVED -ge $ONLINE_ON ]; then
		if $VERBOSE; then
			echo "Executing $ON_ONLINE"
		fi
		$ON_ONLINE
	fi
	if [ $PING_LOST -ge $OFFLINE_ON ]; then
		if $VERBOSE; then
			echo "Executing $ON_OFFLINE"
		fi
		$ON_OFFLINE
	fi
}

# \brief Ensures dependencies are present
# \param $@ The dependencies to check for
function shearer_check_dependencies
{
	for TOOL in "$@"; do
		if ! type "$TOOL" >/dev/null 2>/dev/null; then
			echo "$CODENAME: \"$TOOL\" is required for this application to work correctly." >&2
			exit
		fi
	done
}

# \brief Cleans up the environment and exits
# \param $1 The exit code
# \param $2 The exit message
#
# If DEBUG=true then temporary files are not deleted.
function shearer_exit
{
	#echo "shearer_exit" "$@" >>"$LOG"
	$ON_EXIT
	local EXIT="$1"
	local MESSAGE="$2"
	if [ "$EXIT" = "" ]; then
		EXIT=0
	fi
	if [ "$MESSAGE" = "" ]; then
		MESSAGE="An unrecoverable error has occurred"
	fi
	if ! $DEBUG; then
		rm -rf "$TMP"
	else
		printf "Debug mode is enabled. Temporary files in \"$TMP\" will *not* be deleted.\n"
	fi
	case $EXIT in
		0) exit;;
		*) echo "$CODENAME: $MESSAGE" >&2; exit $EXIT;;
	esac
}

# \brief Displays the help and exits the program
function shearer_help
{
	printf "$NAME $VERSION $COPYRIGHT\n\n"
	printf "This script pings an IP and executes arbitrary commands based on the online/offline status of that IP.\n\n"
	printf "Usage:\n"
	printf "  $CODENAME [options]\n"
	printf "Options:\n"
	printf "  -h\n"
	printf "    Display this help message and exit.\n"
	printf "  -v\n"
	printf "    Be verbose.\n\n"
	printf "Example /etc/pingthen.conf with some custom online/offline actions:\n"
	printf "  REPEAT=0\n"
	printf "  IP=10.12.1.3\n"
	printf "  ON_OFFLINE=pingthen_offline\n"
	printf "  ON_ONLINE=pingthen_online\n"
	printf "  EMAIL=\"mail@example.com\"\n"
	printf "  function pingthen_offline\n"
	printf "  {\n"
	printf "    echo \"The IP \$IP went offline on \`date\`\" | mail -s \"\`hostname\`: \$IP is offline \`date\`\"\n"
	printf "  }\n"
	printf "  function pingthen_online\n"
	printf "  {\n"
	printf "    echo \"The IP \$IP went online on \`date\`\" | mail -s \"\`hostname\`: \$IP is online \`date\`\"\n"
	printf "  }\n"
	exit
}

#------------------------------------------------------------------------------
# detect the operating system

shearer_check_dependencies grep hostname mail ping sleep
OPERATING_SYSTEM=`uname -s`
case $OPERATING_SYSTEM in
	"Linux")
		shearer_check_dependencies ip
		;;
#	"OpenBSD")
#		shearer_check_dependencies cut route tr
#		;;
	*)
		echo "$0: $OPERATING_SYSTEM is currently an unsupported operating system"
		exit 1
esac

#------------------------------------------------------------------------------
# default configuration

DEBUG=false         # Enable debug mode
TMP="/tmp"
IP=127.0.0.1        # The IP address to ping
PING_DELAY=1        # Delay for 1 second between each ping attempt
PING_SEND=3         # Ping the gateway 3 times
PING_TIMEOUT=1      # Time to wait for a response, in seconds
OFFLINE_ON=3        # If 3 ping attempts fail, then the gateway is considered offline
ONLINE_ON=3         # If 3 ping attempts reply, then the gateway is considered online
REPEAT=1            # Repeat execution 1 time. Use 0 for unlimited
REPEAT_DELAY=1      # How long to pause at the end of each repeat
VERBOSE=false       # Print out useful information
ON_EXIT=false       # Run this function on exit
ON_OFFLINE=false    # The function to run when $IP is offline
ON_ONLINE=false     # The function to run when $IP is online
ON_START=false      # Run this function before the pinging begins

#------------------------------------------------------------------------------
# config files

if [ -r /etc/$CODENAME.conf ]; then
	. /etc/$CODENAME.conf
fi

#------------------------------------------------------------------------------
# command line arguments

while getopts "hr:v" OPTION; do
	case "$OPTION" in
		"h") shearer_help;;
		"r") REPEAT="$OPTARG";;
		"v") VERBOSE=true;;
		*) shearer_help;;
	esac
done
shift $(( $OPTIND - 1 ))

#------------------------------------------------------------------------------
# prepare environment

trap shearer_exit EXIT SIGHUP SIGINT SIGQUIT SIGABRT SIGKILL SIGTERM
TMP="$TMP/$CODENAME.$$"
mkdir -p "$TMP"
LOG="$TMP/log"
touch "$LOG"

#------------------------------------------------------------------------------
# begin execution

$ON_START
REPEATS=$REPEAT
while [[ $REPEAT -eq 0 || ( $REPEATS -gt 0 ) ]]; do
	pingthen_test $IP $ON_OFFLINE
	if $VERBOSE; then echo "Waiting for $REPEAT_DELAY second(s)"; fi
	sleep $REPEAT_DELAY
	REPEATS=$(($REPEATS-1))
done

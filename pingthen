#!/usr/bin/env bash

#----------------------------------------------------------------------------
# pingthen
# Copyright (C) 2013 Nathan Shearer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to:
#   The Free Software Foundation Inc.
#   51 Franklin Street
#   Fifth Floor
#   Boston, MA
#   02110-1301
#   USA

NAME="pingthen"
CODENAME="pingthen"
COPYRIGHT="Copyright (C) 2013 Nathan Shearer"
VERSION="3.0.0.0"

# \brief Ping a host and execute functions depending on the results
# \param $1 The IP address to ping
# \param $2 If this many consecutive requests are lost, then the state will change to down
# \param $3 If this many consecutive replies are received, then the state will change to up
# \param $4 The function to execute when the state changes to down
# \param $5 The function to execute when the state changes to up
# \param $6 The function to execute when the state remains down
# \param $7 The function to execute when the state remains up
function pingthen_monitor
{
	shearer_log 5 "pingthen_monitor $*"
	# assign arguments
	local HOST="$1"
	local DOWN_ON="$2"
	local UP_ON="$3"
	local ON_DOWN="$4"
	local ON_UP="$5"
	local WHILE_DOWN="$6"
	local WHILE_UP="$7"
	# statistics
	local TOTAL_RECEIVED=0
	local TOTAL_LOST=0
	local TOTAL_SENT=0
	local WINDOW_RECEIVED=0
	local WINDOW_LOST=0
	# ping loop
	while true; do
		ping -w $PING_TIMEOUT -c 1 $HOST >/dev/null 2>/dev/null
		local PING_RETURN=$?
		if [ $PING_RETURN -eq 0 ]; then
			TOTAL_RECEIVED=$(($TOTAL_RECEIVED+1))
			if [ $WINDOW_RECEIVED -lt $UP_ON ]; then
				WINDOW_RECEIVED=$(($WINDOW_RECEIVED+1))
			fi
			WINDOW_LOST=0
		fi
		if [ $PING_RETURN -ne 0 ]; then
			TOTAL_LOST=$(($TOTAL_LOST+1))
			WINDOW_RECEIVED=0
			if [ $WINDOW_LOST -lt $DOWN_ON ]; then
				WINDOW_LOST=$(($WINDOW_LOST+1))
			fi
		fi
		TOTAL_SENT=$(($TOTAL_SENT+1))
		sleep $PING_DELAY
		shearer_log 3 "$HOST: $WINDOW_RECEIVED/$UP_ON received, $WINDOW_LOST/$DOWN_ON lost"
		shearer_log 4 "$HOST totals: $TOTAL_RECEIVED received, $TOTAL_LOST lost, $TOTAL_SENT transmitted"
		# change state
		if [ $WINDOW_RECEIVED -ge $UP_ON ]; then
			case ${HOST_STATE[$HOST]} in
				"")
					HOST_STATE[$HOST]="up"
					local MESSAGE="Detected host $HOST state is up, $WINDOW_RECEIVED/$UP_ON packets received"
					if [ "$ACT_ON_DETECT" = "true" -a "$ON_UP" != "false" ]; then
						shearer_log 2 "$MESSAGE, Executing $ON_UP"
						$ON_UP $HOST $DOWN_ON $UP_ON
					else
						shearer_log 2 "$MESSAGE"
					fi
					;;
				"up")
					if [ "$WHILE_UP" != "false" ]; then
						shearer_log 2 "Host $HOST is up, $WINDOW_RECEIVED/$UP_ON packets received, Executing $WHILE_UP"
						$WHILE_UP $HOST $DOWN_ON $UP_ON
					fi
					;;
				"down")
					HOST_STATE[$HOST]="up"
					MESSAGE="Host $HOST is up, $WINDOW_RECEIVED/$UP_ON packets received"
					if [ "$ON_UP" != "false" ]; then
						shearer_log 2 "$MESSAGE, Executing $ON_UP"
						$ON_UP $HOST $DOWN_ON $UP_ON
					else
						shearer_log 2 "$MESSAGE"
					fi
					;;
			esac
		fi
		if [ $WINDOW_LOST -ge $DOWN_ON ]; then
			case ${HOST_STATE[$HOST]} in
				"")
					HOST_STATE[$HOST]="down"
					local MESSAGE="Detected host $HOST state is down, 0/$DOWN_ON packets received"
					if [ "$ACT_ON_DETECT" = "true" -a "$ON_DOWN" != "false" ]; then
						shearer_log 2 "$MESSAGE, Executing $ON_DOWN"
						$ON_DOWN $HOST $DOWN_ON $UP_ON
					else
						shearer_log 2 "$MESSAGE"
					fi
					;;
				"up")
					HOST_STATE[$HOST]="down"
					local MESSAGE="Host $HOST is down, 0/$DOWN_ON packets received"
					if [ "$ON_DOWN" != "false" ]; then
						shearer_log 2 "$MESSAGE, Executing $ON_DOWN"
						$ON_DOWN $HOST $DOWN_ON $UP_ON
					else
						shearer_log 2 "$MESSAGE"
					fi
					;;
				"down")
					if [ "$WHILE_DOWN" != "false" ]; then
						shearer_log 2 "Host $HOST is down, 0/$DOWN_ON packets received, Executing $WHILE_DOWN"
						$WHILE_DOWN $HOST $DOWN_ON $UP_ON
					fi
					;;
			esac
		fi
	done
}

# \brief Ensures dependencies are present
# \param $@ The dependencies to check for
function shearer_check_dependencies
{
	for TOOL in "$@"; do
		if ! type "$TOOL" >/dev/null 2>/dev/null; then
			echo "$CODENAME: \"$TOOL\" is required for this application to work correctly." >&2
			exit
		fi
	done
}

# \brief Cleans up the environment and exits
# \param $1 The exit code
# \param $2 The exit message
#
# If DEBUG=true then temporary files are not deleted.
function shearer_exit
{
	shearer_log 4 "shearer_exit $*"
	if $EXITING; then return; fi
	EXITING=true
	shearer_log 1 "Monitoring stopping"
	$ON_STOP
	kill "${HOST_THREADS[@]}"
	shearer_log 1 "Monitoring stopped"
	local EXIT="$1"
	local MESSAGE="$2"
	if [ "$EXIT" = "" ]; then
		EXIT=0
	fi
	if [ "$MESSAGE" = "" ]; then
		MESSAGE="An unrecoverable error has occurred"
	fi
	if ! $DEBUG; then
		rm -rf "$TMP"
	else
		printf "Debug mode is enabled. Temporary files in \"$TMP\" will *not* be deleted.\n"
	fi
	case $EXIT in
		0) exit;;
		*) echo "$CODENAME: $MESSAGE" >&2; exit $EXIT;;
	esac
}

# \brief Displays the help and exits the program
function shearer_help
{
	echo "$NAME $VERSION $COPYRIGHT"
	echo
	echo "This script pings an IP and executes arbitrary commands based on the up/down status of that IP."
	echo
	echo "Usage:"
	echo "  $CODENAME [options]"
	echo "Options:"
	echo "  -c pingthen.conf"
	echo "    Load pingthen.conf after trying /etc/pingthen.conf"
	echo "  -h"
	echo "    Display this help message and exit."
	echo "  -v #"
	echo "    Use more or less verbose logging. Valid values are from 0 to 4 inclusive:"
	echo "      0  No logging output"
	echo "      1  Log the start/stop of this script"
	echo "      2  Default. Log host state changes"
	echo "      3  Log the moving window results after each ping request"
	echo "      4  Log total results after each ping request"
	echo "      5  Log each function call with arguments"
	exit
}

# \brief Logs messages to syslog with logger
# \param $1 Only log this message if $VERBOSE is greater than or equal to $1
# \param $2 The message that will be logged
function shearer_log
{
	if [ $VERBOSE -ge $1 ]; then
		logger "$CODENAME: $2"
	fi
}

#------------------------------------------------------------------------------
# detect the operating system

shearer_check_dependencies grep hostname
OPERATING_SYSTEM=`uname -s`
case $OPERATING_SYSTEM in
	"Linux")
		shearer_check_dependencies logger ping sleep
		;;
	"OpenBSD")
		shearer_check_dependencies logger ping sleep
		;;
	*)
		echo "$0: $OPERATING_SYSTEM is currently an unsupported operating system"
		exit 1
esac

#------------------------------------------------------------------------------
# default configuration

ACT_ON_DETECT=true   # Call the up/down functions when host state is detected
DEBUG=false          # Enable debug mode
VERBOSE=2            # Increase logging verbosity
TMP="/tmp"

#       host       down when  up when  on down  on up  while down  while up
HOSTS=( 127.0.0.1  3          5        false    false  false       false \
        127.0.0.2  3          5        false    false  false       false \
        127.0.0.3  3          5        false    false  false       false )

PING_DELAY=1      # Delay for 1 second between each ping attempt
PING_TIMEOUT=1    # Time to wait for a ping response, in seconds
ON_START=false    # Run this function when pingthen starts
ON_STOP=false     # Run this function when pingthen stops

#------------------------------------------------------------------------------
# config files

if [ -r /etc/$CODENAME.conf ]; then
	. /etc/$CODENAME.conf
fi

#------------------------------------------------------------------------------
# command line arguments

while getopts "c:hv:" OPTION; do
	case "$OPTION" in
		"c") . "$OPTARG";;
		"h") shearer_help;;
		"v") VERBOSE="$OPTARG";;
		*) shearer_help;;
	esac
done
shift $(( $OPTIND - 1 ))

#------------------------------------------------------------------------------
# prepare environment

EXITING=false
trap shearer_exit EXIT SIGHUP SIGINT SIGQUIT SIGABRT SIGKILL SIGTERM
TMP="$TMP/$CODENAME.$$"
mkdir -p "$TMP"
declare -A HOST_STATE

#------------------------------------------------------------------------------
# begin execution

shearer_log 1 "Monitoring starting"
$ON_START
shearer_log 1 "Monitoring started"
unset HOST_THREADS
HOST=0
while [ $HOST -lt $((${#HOSTS[*]}/7)) ]; do
	pingthen_monitor ${HOSTS[$(($HOST*7+0))]} ${HOSTS[$(($HOST*7+1))]} ${HOSTS[$(($HOST*7+2))]} ${HOSTS[$(($HOST*7+3))]} ${HOSTS[$(($HOST*7+4))]} ${HOSTS[$(($HOST*7+5))]} ${HOSTS[$(($HOST*7+6))]} &
	HOST_THREADS[${#HOST_THREADS[@]}]=$!
	HOST=$(($HOST+1))
done
wait "${HOST_THREADS[@]}"

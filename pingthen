#!/bin/bash

#----------------------------------------------------------------------------
# pingthen
# Copyright (C) 2013 Nathan Shearer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to:
#   The Free Software Foundation Inc.
#   51 Franklin Street
#   Fifth Floor
#   Boston, MA
#   02110-1301
#   USA

NAME="pingthen"
CODENAME="pingthen"
COPYRIGHT="Copyright (C) 2013 Nathan Shearer"
VERSION="1.0.0.0"

function pingthen_fail
{
	echo "pingthen_fail is not currently configured to do anything"
}

function pingthen_success
{
	echo "pingthen_success is not currently configured to do anything"
}

# \brief Ensures dependencies are present
# \param $@ The dependencies to check for
function shearer_check_dependencies
{
	for TOOL in "$@"; do
		if ! type "$TOOL" >/dev/null 2>/dev/null; then
			echo "$CODENAME: \"$TOOL\" is required for this application to work correctly." >&2
			exit
		fi
	done
}

# \brief Sends an email
# \param $1 The e-mail address
# \param $2 The subject
# \param $3 The message
function shearer_email
{
	echo "shearer_email" "$@" >> "$LOG"
	cat "$3" | mail -s "$2" "$1"
}

# \brief Cleans up the environment and exits
# \param $1 The exit code
# \param $2 The exit message
#
# If DEBUG=true then temporary files are not deleted.
function shearer_exit
{
	#echo "shearer_exit" "$@" >>"$LOG"
	local EXIT="$1"
	local MESSAGE="$2"
	if [ "$EXIT" = "" ]; then
		EXIT=0
	fi
	if [ "$MESSAGE" = "" ]; then
		MESSAGE="An unrecoverable error has occurred"
	fi
	if ! $DEBUG; then
		rm -rf "$TMP"
	else
		printf "Debug mode is enabled. Temporary files in \"$TMP\" will *not* be deleted.\n"
	fi
	case $EXIT in
		0) exit;;
		*) echo "$CODENAME: $MESSAGE" >&2; exit $EXIT;;
	esac
}

# \brief Displays the help and exits the program
function shearer_help
{
	printf "$NAME $VERSION $COPYRIGHT\n"
	printf "This script pings a host and executes arbitrary commands depending on a success or fail condition.\n\n"
	printf "Usage:\n"
	printf "  $CODENAME [options]\n"
	printf "Options:\n"
	printf "  -h\n"
	printf "    Display this help message and exit.\n"
	printf "  -n N\n"
	printf "    Sets the niceness to N (default 0).\n"
	printf "  -r 8.8.8.8\n"
	printf "    The remote host to ping.\n"
	printf "  -v\n"
	printf "    Print the version and exit.\n"
	printf "Examples:\n"
	printf "  $CODENAME -h\n"
	printf "  $CODENAME -n 5\n"
	printf "  $CODENAME -v\n"
	exit
}

# \brief Swaps files $1 and $2
function shearer_swap
{
	mv "$1" "$TMP/swap"
	mv "$2" "$1"
	mv "$TMP/swap" "$2"
}

#------------------------------------------------------------------------------
# check for dependencies

shearer_check_dependencies ip ping

#------------------------------------------------------------------------------
# default configuration

DEBUG=false
NICE=0
TMP="/tmp"

GATEWAYS=( 10.0.0.1 172.16.0.1 192.168.0.1 ) # An array of default gateways to monitor
PING_DELAY=5s                                # Delay for 1 second between each ping attempt
PING_SEND=3                                  # Ping the gateway 3 times
PING_TIMEOUT=1                               # Time to wait for a response, in seconds
OFFLINE_ON=3                                 # If 3 ping attempts fail, then the gateway is considered offline
ONLINE_ON=3                                  # If 3 ping attempts reply, then the gateway is considered online
ENDDELAY=0s                                  # How long to pause at the end of this script
VERBOSE=false                                # Print out useful information

#------------------------------------------------------------------------------
# config files

if [ -r /etc/$CODENAME.conf ]; then
	. /etc/$CODENAME.conf
fi
if [ -r ~/.$CODENAME.conf ]; then
	. ~/.$CODENAME.conf
fi

#------------------------------------------------------------------------------
# command line arguments

while getopts "hn:r:v" OPTION; do
	case "$OPTION" in
		"h") shearer_help;;
		"n") NICE="$OPTARG";;
		"v") VERBOSE=true;;
		*) shearer_help;;
	esac
done
shift $(( $OPTIND - 1 ))

#------------------------------------------------------------------------------
# prepare environment

trap shearer_exit EXIT SIGHUP SIGINT SIGQUIT SIGABRT SIGKILL SIGTERM
TMP="$TMP/$CODENAME.$$"
mkdir -p "$TMP"
LOG="$TMP/log"
touch "$LOG"
renice $NICE $$ >>"$LOG" 2>>"$LOG"

#------------------------------------------------------------------------------
# begin execution

# prepare each array:
# PING_SENT=( 0 0 0 ... )
# PING_RECEIVED=( 0 0 0 ... )
# PING_LOST=( 0 0 0 ... )
GATEWAY_INDEX=0
for GATEWAY in "${GATEWAYS[@]}"; do
	PING_SENT[$GATEWAY_INDEX]=0
	PING_RECEIVED[$GATEWAY_INDEX]=0
	PING_LOST[$GATEWAY_INDEX]=0
	GATEWAY_INDEX=$(($GATEWAY_INDEX+1))
done

# ping each gateway
for PING_ATTEMPT in `seq 1 $PING_SEND`; do
	# TODO ping each gateway in parallel with threads
	GATEWAY_INDEX=0
	for GATEWAY in "${GATEWAYS[@]}"; do
		ping -W $PING_TIMEOUT ${GATEWAYS[$GATEWAY_INDEX]} -c 1 >>"$LOG" 2>>"$LOG"
		PING_RETURN=$?
		if [ $PING_RETURN -eq 0 ]; then
			PING_RECEIVED[$GATEWAY_INDEX]=$((${PING_RECEIVED[$GATEWAY_INDEX]}+1))
		fi
		if [ $PING_RETURN -ne 0 ]; then
			PING_LOST[$GATEWAY_INDEX]=$((${PING_LOST[$GATEWAY_INDEX]}+1))
		fi
		PING_SENT[$GATEWAY_INDEX]=$((${PING_SENT[$GATEWAY_INDEX]}+1))
		GATEWAY_INDEX=$(($GATEWAY_INDEX+1))
	done
	sleep $PING_DELAY
done

# echo out results
if $VERBOSE; then
	GATEWAY_INDEX=0
	for GATEWAY in "${GATEWAYS[@]}"; do
		echo "Gateway: ${GATEWAYS[$GATEWAY_INDEX]}"
		echo "  Packets Sent: ${PING_SENT[$GATEWAY_INDEX]}"
		echo "  Packets Received: ${PING_RECEIVED[$GATEWAY_INDEX]}"
		echo "  Packets Lost: ${PING_LOST[$GATEWAY_INDEX]}"
		GATEWAY_INDEX=$(($GATEWAY_INDEX+1))
	done
fi

# update the default routes
GATEWAY_INDEX=0
for GATEWAY in "${GATEWAYS[@]}"; do
	if [ ${PING_RECEIVED[$GATEWAY_INDEX]} -ge $ONLINE_ON ]; then
		if $VERBOSE; then echo "Updating ${GATEWAYS[$GATEWAY_INDEX]} with a low metric"; fi
		ip route del default via ${GATEWAYS[$GATEWAY_INDEX]}
		ip route add default via ${GATEWAYS[$GATEWAY_INDEX]} metric $((1+$GATEWAY_INDEX))
		# update this default route with a low metric
	fi
	if [ ${PING_LOST[$GATEWAY_INDEX]} -ge $OFFLINE_ON ]; then
		if $VERBOSE; then echo "Updating ${GATEWAYS[$GATEWAY_INDEX]} with a high metric"; fi
		ip route del default via ${GATEWAYS[$GATEWAY_INDEX]}
		ip route add default via ${GATEWAYS[$GATEWAY_INDEX]} metric $((1+$GATEWAY_INDEX+${#GATEWAYS[@]}))
	fi
	GATEWAY_INDEX=$(($GATEWAY_INDEX+1))
done

if $VERBOSE; then echo "Waiting for $ENDDELAY"; fi
sleep $ENDDELAY
